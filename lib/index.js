// Generated by CoffeeScript 1.3.3
(function() {
  var Humane_List,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Humane_List = (function() {

    function Humane_List(vals) {
      var k, v;
      this.core = (function() {
        var _i, _len, _results, _results1;
        if (vals && vals.length) {
          _results = [];
          for (_i = 0, _len = vals.length; _i < _len; _i++) {
            v = vals[_i];
            _results.push([[], v]);
          }
          return _results;
        } else if (vals) {
          _results1 = [];
          for (k in vals) {
            v = vals[k];
            _results1.push([[k], v]);
          }
          return _results1;
        } else {
          return vals || [];
        }
      })();
    }

    Humane_List.prototype.pop = function(pos) {
      var arr;
      if (pos.toString() === 'first') {
        arr = this.core.shift();
        if (!arr) {
          return arr;
        }
        return arr[1];
      } else {
        arr = this.core.pop();
        if (!arr) {
          return arr;
        }
        return arr[1];
      }
    };

    Humane_List.prototype.insert = function(pos, v) {
      if (pos.toString() === 'first') {
        return this.core.unshift([[], v]);
      } else {
        return this.core.push([[], v]);
      }
    };

    Humane_List.prototype.first = function() {
      return this.at_position(1);
    };

    Humane_List.prototype.last = function() {
      return this.at_position(this.core.length);
    };

    Humane_List.prototype.alias = function(key, val) {};

    Humane_List.prototype.at_key = function(k) {
      var target, v, _i, _len, _ref, _results;
      _ref = this.core;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (v[0].indexOf(k) > -1) {
          _results.push(target = v[1]);
        }
      }
      return _results;
    };

    Humane_List.prototype.has_key = function(k) {
      var target, v, _i, _len, _ref;
      _ref = this.core;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (__indexOf.call(v[0], k) >= 0) {
          target = true;
        }
      }
      return target || false;
    };

    Humane_List.prototype["delete"] = function(k) {};

    Humane_List.prototype.merge_top = function() {};

    Humane_List.prototype.merge_end = function() {};

    Humane_List.prototype.merge = function(o, pos) {
      var key, new_core, val;
      new_core = (function() {
        var _i, _len, _results, _results1;
        if (o && o.length) {
          _results = [];
          for (_i = 0, _len = o.length; _i < _len; _i++) {
            val = o[_i];
            _results.push([[], val]);
          }
          return _results;
        } else {
          _results1 = [];
          for (key in o) {
            val = o[key];
            _results1.push([[key], val]);
          }
          return _results1;
        }
      })();
      return this.core = pos("top") ? new_core.concat(this.core) : this.core.concat(new_core);
    };

    Humane_List.prototype.values = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.core;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v[1]);
      }
      return _results;
    };

    Humane_List.prototype.at_position = function(n) {
      var arr, prog_index;
      prog_index = (n || 1) - 1;
      arr = this.core[prog_index];
      if (!arr) {
        return arr;
      }
      return arr[1];
    };

    return Humane_List;

  })();

  exports.Humane_List = Humane_List;

}).call(this);
