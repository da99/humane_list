// Generated by CoffeeScript 1.3.3
(function() {
  var Element, Humane_List, Position, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Position = require('humane_list/lib/Position');

  Element = require("humane_list/lib/Element");

  _ = require("underscore");

  Humane_List = (function() {

    function Humane_List(vals) {
      var k, v, _i, _len;
      this.d = {};
      this.d.core = [];
      if (vals) {
        if (vals.shift) {
          for (_i = 0, _len = vals.length; _i < _len; _i++) {
            v = vals[_i];
            this.push('bottom', v);
          }
        } else {
          for (k in vals) {
            v = vals[k];
            this.push('bottom', k, v);
          }
        }
      }
    }

    Humane_List.prototype.position = function() {
      return new Position(this);
    };

    Humane_List.prototype.position_after = function(n) {
      return _.find(this.positions(), function(p) {
        return p > n;
      });
    };

    Humane_List.prototype.position_before = function(n) {
      return _.find(this.positions().reverse(), function(p) {
        return p < n;
      });
    };

    Humane_List.prototype.first_position = function(n) {};

    Humane_List.prototype.first_position = function() {
      if (this.is_empty()) {
        return 0;
      }
      return _.first(this.d.core).position();
    };

    Humane_List.prototype.last_position = function() {
      if (this.is_empty()) {
        return 0;
      }
      return _.last(this.d.core).position();
    };

    Humane_List.prototype.is_empty = function() {
      return this.d.core.length === 0;
    };

    Humane_List.prototype.length = function() {
      return this.d.core.length;
    };

    Humane_List.prototype.keys = function() {
      return this.d.keys;
    };

    Humane_List.prototype.pop = function(pos) {
      var ele;
      ele = pos.toString() === 'top' ? this.d.core.shift() : this.d.core.pop();
      if (!ele) {
        return ele;
      }
      return ele.value();
    };

    Humane_List.prototype.push = function() {
      var args, e, i, last, next_v, num_pos, pos, v, _i, _len, _ref, _results;
      args = arguments;
      pos = args[0];
      num_pos = (function() {
        if (_.isNumber(pos)) {
          return pos;
        } else {
          if (pos === 'top') {
            if (this.is_empty()) {
              return 1;
            } else {
              return this.first_position() - 1;
            }
          } else if (pos === 'bottom') {
            last = this.positions().pop();
            return (last && (last + 1)) || this.d.core.length + 1;
          } else {
            throw new Error("Unknown position: " + pos);
          }
        }
      }).call(this);
      switch (args.length) {
        case 2:
          e = new Element(num_pos, [], args[1]);
          break;
        case 3:
          e = new Element(num_pos, args[1], args[2]);
          break;
        default:
          throw new Error("Invalid arguments: " + arguments);
      }
      if (pos === 'bottom') {
        this.d.core.push(e);
      } else {
        this.d.core.unshift(e);
      }
      this.d.core = this.d.core.sort(function(a, b) {
        return a.position() - b.position();
      });
      if (this.d.core.length > 1) {
        _ref = this.d.core;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          v = _ref[i];
          next_v = this.d.core[i + 1];
          if (next_v) {
            if (v.position() >= next_v.position()) {
              _results.push(next_v.update_position(next_v.position() + 1));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    Humane_List.prototype.top = function() {
      return this.d.core[0] && this.d.core[0].value();
    };

    Humane_List.prototype.bottom = function() {
      var row;
      row = this.d.core[this.d.core.length - 1];
      return row && row.value();
    };

    Humane_List.prototype.at_key = function(k) {
      var ele, v, _i, _len, _ref;
      _ref = this.d.core;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ele = _ref[_i];
        if (__indexOf.call(ele.keys(), k) >= 0) {
          v = ele.value();
        }
      }
      return v;
    };

    Humane_List.prototype.at_position = function(n) {
      var comp_pos;
      comp_pos = this.to_key_or_computer_position(n);
      return this.d.core[comp_pos] && this.d.core[comp_pos].value();
    };

    Humane_List.prototype.has_key = function(k) {
      var found, v;
      found = (function() {
        var _i, _len, _ref, _results;
        _ref = this.d.core;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (__indexOf.call(v.keys(), k) >= 0) {
            _results.push(v.keys());
          }
        }
        return _results;
      }).call(this);
      return found.length > 0;
    };

    Humane_List.prototype.positions = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.d.core;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.position());
      }
      return _results;
    };

    Humane_List.prototype.keys = function() {
      var ele, _i, _len, _ref, _results;
      _ref = this.d.core;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ele = _ref[_i];
        _results.push(ele.keys());
      }
      return _results;
    };

    Humane_List.prototype.values = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.d.core;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.value());
      }
      return _results;
    };

    Humane_List.prototype.concat = function(pos, o) {
      var i, key, keys, positions, v, val, _i, _j, _len, _len1, _results, _results1;
      if (o.shift) {
        positions = (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = o.length; _i < _len; i = ++_i) {
            v = o[i];
            _results.push(i);
          }
          return _results;
        })();
        if (pos === 'top') {
          positions = positions.reverse();
        }
        _results = [];
        for (_i = 0, _len = positions.length; _i < _len; _i++) {
          i = positions[_i];
          _results.push(this.push(pos, o[i]));
        }
        return _results;
      } else {
        keys = (function() {
          var _results1;
          _results1 = [];
          for (key in o) {
            val = o[key];
            _results1.push(key);
          }
          return _results1;
        })();
        if (pos === 'top') {
          keys = keys.reverse();
        }
        _results1 = [];
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          key = keys[_j];
          _results1.push(this.push(pos, key, o[key]));
        }
        return _results1;
      }
    };

    Humane_List.prototype.to_key_or_computer_position = function(key_or_human_pos) {
      if (typeof key_or_human_pos === 'number') {
        return key_or_human_pos - 1;
      }
      return key_or_human_pos;
    };

    Humane_List.prototype.get_computer_position = function(key_or_human_pos) {
      var k, key_or_pos, pos, v, _i, _len, _ref;
      key_or_pos = this.to_key_or_computer_position(key_or_human_pos);
      if (!key_or_pos) {
        return key_or_pos;
      }
      _ref = this.d.core;
      for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
        v = _ref[k];
        if ((k === key_or_pos) || (__indexOf.call(v.keys(), key_or_pos) >= 0)) {
          pos = k;
        }
      }
      return pos;
    };

    Humane_List.prototype.get_computer_position_or_throw = function(key_or_human_pos) {
      var pos;
      pos = this.get_computer_position(key_or_human_pos);
      if (!pos) {
        throw new Error("Key/pos is not defined: " + key_or_human_pos);
      }
      return pos;
    };

    Humane_List.prototype.alias = function(key_or_pos, nickname) {
      var keys, pos;
      pos = this.get_computer_position_or_throw(key_or_pos);
      keys = this.d.core[pos].keys();
      if (__indexOf.call(keys, nickname) >= 0) {
        return nickname;
      }
      return keys.push(nickname);
    };

    Humane_List.prototype.remove_alias = function(nickname) {
      var ele, _i, _len, _ref;
      _ref = this.d.core;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ele = _ref[_i];
        ele.remove_alias(nickname);
      }
      return nickname;
    };

    Humane_List.prototype.delete_at = function(target_k) {
      var k, old, pos, row, v;
      pos = this.get_computer_position(target_k);
      row = this.d.core[pos];
      if (!row) {
        return row;
      }
      old = this.at_position(pos);
      this.d.core = (function() {
        var _i, _len, _ref, _results;
        _ref = this.d.core;
        _results = [];
        for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
          v = _ref[k];
          if (k !== pos) {
            _results.push(v);
          }
        }
        return _results;
      }).call(this);
      return old;
    };

    return Humane_List;

  })();

  module.exports = Humane_List;

  module.exports.Humane_List = Humane_List;

  module.exports.Position = Position;

}).call(this);
