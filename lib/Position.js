// Generated by CoffeeScript 1.3.3
(function() {
  var Position, forward, rw, _;

  rw = require('rw_ize');

  forward = require('forward_these_functions');

  _ = require('underscore');

  Position = (function() {

    rw.ize(Position);

    forward(Position.prototype, "list");

    Position.read_able('list', 'position', 'object_id_at_position');

    function Position(list) {
      this.rw_data('list', list);
      if (this.list().is_empty()) {
        this.rw_data('position', this.list().first_position());
      } else {
        this.to(this.list().first_position());
      }
    }

    Position.prototype.value = function() {
      this.throw_if_position_has_changed();
      return this.list().at_position(this.position());
    };

    Position.prototype.throw_if_position_has_changed = function() {
      var id_desc, pos_desc;
      if (!_.isNumber(this.object_id_at_position())) {
        return null;
      }
      pos_desc = this.list().describe_position(this.position());
      id_desc = this.list().describe_object_id(this.object_id_at_position());
      if (!(pos_desc.object_id === this.object_id_at_position())) {
        throw new Error("Position of element has changed from " + (this.position()) + " to " + id_desc.position);
      }
    };

    Position.prototype.is_at_top = function() {
      return this.position() === this.list().first_position();
    };

    Position.prototype.is_at_bottom = function() {
      return this.position() === this.list().last_position();
    };

    Position.prototype.downward = function() {
      this.throw_if_position_has_changed();
      if (this.position() === this.list().last_position()) {
        throw new Error("Position already at end: " + (this.position()) + ".");
      }
      return this.to(this.list().position_after(this.position()));
    };

    Position.prototype.upward = function() {
      var prev;
      this.throw_if_position_has_changed();
      prev = this.list().position_before(this.position());
      if (!_.isNumber(prev)) {
        throw new Error("No valid position before: " + (this.position()) + ".");
      }
      return this.to(prev);
    };

    Position.prototype.next = function() {
      var next;
      this.throw_if_position_has_changed();
      next = this.list().position_after(this.position());
      if (!_.isNumber(next)) {
        throw new Error("No valid position after: " + (this.position()) + ".");
      }
      return this.list().at_position(next);
    };

    Position.prototype.previous = function() {
      var prev;
      this.throw_if_position_has_changed();
      prev = this.list().position_before(this.position());
      if (!_.isNumber(prev)) {
        throw new Error("No valid position before: " + (this.position()) + ".");
      }
      return this.list().at_position(prev);
    };

    Position.prototype.to_top = function() {
      return this.to(this.list().first_position());
    };

    Position.prototype.to_bottom = function() {
      return this.to(this.list().last_position());
    };

    Position.prototype.to = function(n) {
      if (n < this.list().first_position()) {
        throw new Error("Position can't be, " + n + ", because starting position is: " + (this.list().first_position()) + ".");
      }
      if (this.list().is_empty() && n !== 0) {
        throw new Error("Position can't be, " + n + ", because length is: " + (this.list().length()) + ".");
      }
      if (n > this.list().last_position()) {
        throw new Error("Position can't be, " + n + ", because length is: " + (this.list().length()) + ".");
      }
      this.rw_data('position', n);
      if (!this.list().is_empty()) {
        return this.rw_data('object_id_at_position', (this.list().describe_position(n)).object_id);
      }
    };

    return Position;

  })();

  module.exports = Position;

}).call(this);
