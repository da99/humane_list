// Generated by CoffeeScript 1.3.3
(function() {
  var Position, forward, rw;

  rw = require('rw_ize');

  forward = require('forward_these_functions');

  Position = (function() {

    rw.ize(Position);

    forward(Position.prototype, "list");

    Position.read_able('list', 'position');

    function Position(list) {
      this.rw_data('list', list);
      this.rw_data('position', this.list().first_position());
    }

    Position.prototype.value = function() {
      return this.list().at_position(this.position());
    };

    Position.prototype.is_at_top = function() {
      return this.position() === this.list().first_position();
    };

    Position.prototype.is_at_bottom = function() {
      return this.position() === this.list().last_position();
    };

    Position.prototype.downward = function() {
      return this.to(this.position() + 1);
    };

    Position.prototype.upward = function() {
      return this.to(this.position() - 1);
    };

    Position.prototype.next = function() {
      return this.list().at_position(this.position() + 1);
    };

    Position.prototype.previous = function() {
      return this.list().at_position(this.position() - 1);
    };

    Position.prototype.to_top = function() {
      return this.to(this.list().first_position());
    };

    Position.prototype.to_bottom = function() {
      return this.to(this.list().last_position());
    };

    Position.prototype.to = function(n) {
      if (n < this.list().first_position()) {
        throw new Error("Position can't be, " + n + ", because starting position is: " + (this.list().first_position()) + ".");
      }
      if (this.list().is_empty() && n !== 0) {
        throw new Error("Position can't be, " + n + ", because length is: " + (this.list().length()) + ".");
      }
      if (n > this.list().last_position()) {
        throw new Error("Position can't be, " + n + ", because length is: " + (this.list().length()) + ".");
      }
      return this.rw_data('position', n);
    };

    return Position;

  })();

  module.exports = Position;

}).call(this);
